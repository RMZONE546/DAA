import java.util.Collections;
import java.util.PriorityQueue;

public class MedianFinder {
    private PriorityQueue<Integer> low;  // max heap
    private PriorityQueue<Integer> high; // min heap

    public MedianFinder() {
        low = new PriorityQueue<>(Collections.reverseOrder());
        high = new PriorityQueue<>();
    }

    public void addNum(int num) {
        low.add(num);
        high.add(low.poll());

        if (high.size() > low.size()) {
            low.add(high.poll());
        }
    }

    public double findMedian() {
        if (low.size() > high.size()) {
            return low.peek();
        } else {
            return (low.peek() + high.peek()) / 2.0;
        }
    }

    public static void main(String[] args) {
        MedianFinder mf = new MedianFinder();
        int[] nums = {5, 2, 10, 1, 3, 8};

        for (int num : nums) {
            mf.addNum(num);
            System.out.println("Inserted: " + num + ", Median: " + mf.findMedian());
        }
    }
}
