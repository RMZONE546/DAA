public class GridCell{
    int val;
    char dir;

    public GridCell(int val, char dir) {
        this.val = val;
        this.dir = dir;
    }
}

public class LongestRepeatingSubsequence{

    public static void readLRS(String s, GridCell[][] grid, int i, int j) {
        if (i == 0 || j == 0) return;

        if (grid[i][j].dir == 'D') {
            readLRS(s, grid, i - 1, j - 1);
            System.out.print(s.charAt(i - 1));
        } else if (grid[i][j].dir == 'U') {
            readLRS(s, grid, i - 1, j);
        } else {
            readLRS(s, grid, i, j - 1);
        }
    }

    public static void lrs(String s) {
        int n = s.length();
        GridCell[][] grid = new GridCell[n + 1][n + 1];

        for (int i = 0; i <= n; i++) {
            grid[i][0] = new GridCell(0, 'H');
        }
        for (int j = 0; j <= n; j++) {
            grid[0][j] = new GridCell(0, 'H');
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i - 1) == s.charAt(j - 1) && i != j) {
                    grid[i][j] = new GridCell(grid[i - 1][j - 1].val + 1, 'D');
                } else {
                    if (grid[i - 1][j].val >= grid[i][j - 1].val) {
                        grid[i][j] = new GridCell(grid[i - 1][j].val, 'U');
                    } else {
                        grid[i][j] = new GridCell(grid[i][j - 1].val, 'S');
                    }
                }
            }
        }

        System.out.print("LRS: ");
        readLRS(s, grid, n, n);
        System.out.println();
        System.out.println("Length of LRS: " + grid[n][n].val);
    }

    public static void main(String[] args) {
        String s = "AABCBDED";  
        lrs(s);
    }
}
